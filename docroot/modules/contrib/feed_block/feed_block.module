<?php

/**
 * @file
 * Contains feed_block.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\block_content\BlockContentInterface;

/**
 * Implements hook_help().
 */
function feed_block_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the feed_block module.
    case 'help.page.feed_block':
      $output = '';
      $output .= '<h3>' . t('Installation') . '</h3>';
      $output .= '<p>' . t('<ol><li>Install as you would normally install a contributed drupal module. See the <a href=":docs">documentation</a> for further information.</li><li>Go to Manage > Extend, and enable the Feed Block module (drush en feed_block).</li></ol>', [':docs' => 'https://www.drupal.org/documentation/install/modules-themes/modules-8']) . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<h3>' . t('Theming') . '</h3>';
      $output .= '<p>' . t("By design, the display of feed content provided by this module is minimal. Developers can copy the feed_block.html.twig file from the /templates directory and add it to their theme and customize as necessary. To remove the CSS provided by this module, remove the <code>{{ attach_library('feed_block/feed_block') }}</code> from the twig file, or point it to your own defined library.") . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function feed_block_theme() {
  // Define a template path for individual feed items.
  return [
    'feed_block_rss_item' => [
      'template' => 'feed-block-rss-item',
      'variables' => [
        'date' => NULL,
        'url' => NULL,
        'title' => NULL,
        'description' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function feed_block_block_content_view_alter(array &$build, BlockContentInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'feed_block') {
    $cache_expiration = \Drupal::config('feed_block')->get('cache_expiration');
    if (!$cache_expiration) {
      // Default to 1 day feed cache if not specified in settings.
      $cache_expiration = 86400;
    }
    // Add 'max age' to bubble up expiration via custom event subscriber.
    $build['#cache']['max-age'] = $cache_expiration;
    // Add feed_block cache tag; only pages with this block are affected.
    $build['#cache']['tags'][] = 'feed_block';
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function feed_block_theme_suggestions_block_alter(&$suggestions, $variables) {
  // Suggest the block--feed-block.html.twig custom block level template.
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface && $content['#block_content']->bundle() == 'feed_block') {
    $suggestions[] = 'block__feed_block';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function feed_block_preprocess_field(&$variables, $hook) {
  switch ($variables['element']['#bundle']) {
    case 'feed_block':
      if ($variables['element']['#field_name'] == 'field_read_more') {
        // Add 'button' class to Read more <a> tag.
        $variables['items'][0]['content']['#options']['attributes']['class'][] = 'button';
      }
      break;
  }
}
