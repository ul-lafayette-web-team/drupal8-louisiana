{"version":3,"sources":["wysiwyg.scss","wysiwyg.css","variables/_type.scss","../../../node_modules/foundation-sites/scss/foundation.scss","global/_wysiwyg.scss","utilities/_mixins.scss","../../../node_modules/foundation-sites/scss/util/_unit.scss","../../../node_modules/foundation-sites/scss/util/_breakpoint.scss"],"names":[],"mappings":"AAAA;;;;ECIE;ACUF;;;;;;;;;;;;;;;;;;CDSC;AEvBD;;;;;EF6BE;AGxBF;;EC4GE,SAAS;EA2JT,mBCpLuD;ALtDzD;;AMoIM;EHjKN;;IC0QI,mBCvLqD;ELhDvD;AACF;;AM6HM;EHjKN;;IC8QI,kBC3LqD;ELzCvD;AACF;;AMsHM;EHjKN;;ICgHI,YAAY;IACZ,qBC9BqD;ID+BrD,sBC/BqD;ELhCvD;EIiEE;;IACE,qBClCmD;EL5BvD;AACF;;AGxDA;;EAKI,cAAc;AHwDlB;;AGpDA;;ECkFE,SAAS;EA4KT,mBCpLuD;ALhBzD;;AM8FM;EHxJN;;ICiQI,mBCvLqD;ELVvD;AACF;;AMuFM;EHxJN;;ICqQI,kBC3LqD;ELHvD;AACF;;AMgFM;EHxJN;;ICsFI,WAAW;IACX,qBCRS;IDST,sBCdqD;ELMvD;EIUE;;IACE,qBCZO;ELKX;AACF;;AGrFA;;EAKI,cAAc;AHqFlB;;AGjFA;;ECqPE,mBCpLuD;ED0CvD,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AJpBnB;;AMsDM;EH/IN;;ICwPI,mBCvLqD;EL8BvD;AACF;;AM+CM;EH/IN;;IC4PI,kBC3LqD;ELqCvD;AACF;;AGvGA;;EAKI,cAAc;AHuGlB;;ADzFA;EACE,eAAe;AC4FjB","file":"../scss/wysiwyg.css","sourcesContent":["/**\n * OHO Interactive WYSIWYG stylesheet.\n * Version 2019-04-08\n * https://www.oho.com\n */\n\n/// Import order:\n/// 1.  Encoding\n/// 2.  Variables\n/// 3.  Foundation\n/// 4.  Utilites\n/// 5.  WYSIWYG\n/// 6.  WYSIWYG Styles\n\n/// Encoding\n/// --------\n@charset 'UTF-8';\n\n/// Variables\n/// ---------\n@import \"variables/_animation.scss\";\n@import \"variables/_colors.scss\";\n@import \"variables/_foundation.scss\";\n@import \"variables/_type.scss\";\n\n/// Foundation\n/// ----------\n/// Source: http://foundation.zurb.com/docs/\n/// Note: We're only importing Foundation's function's and mixins, not\n/// generating CSS.\n@import 'foundation';\n\n/// Utilities\n/// ---------\n@import \"utilities/_mixins.scss\";\n\n/// WYSIWYG\n/// --------------\n@import 'global/wysiwyg';\n\n/// WYSIWYG Styles\n/// --------------\nimg {\n  max-width: 100%;\n}\n","/**\n * OHO Interactive WYSIWYG stylesheet.\n * Version 2019-04-08\n * https://www.oho.com\n */\n/*\nGotham\nXLight 200\nLight 300 \nBook 400\nMedium 500\nBold 700\nBlack 800\n\nMontserrat\nLight 300\nBook 400\nMedium 500\nBold 700\n\nRoboto Slab\nLight 300\nBold 700\n*/\n/**\n * Foundation for Sites by ZURB\n * Version 6.5.3\n * foundation.zurb.com\n * Licensed under MIT Open Source\n */\n.obj-right,\n.align-right {\n  margin: 0;\n  margin-top: 1.25rem;\n}\n\n@media print, screen and (min-width: 48em) {\n  .obj-right,\n  .align-right {\n    margin-top: 1.25rem;\n  }\n}\n\n@media print, screen and (min-width: 64em) {\n  .obj-right,\n  .align-right {\n    margin-top: 2.5rem;\n  }\n}\n\n@media print, screen and (min-width: 48em) {\n  .obj-right,\n  .align-right {\n    float: right;\n    padding: 0 0 0 2.5rem;\n    margin-bottom: 3.75rem;\n  }\n  .obj-right figcaption,\n  .align-right figcaption {\n    padding: 0 0 0 2.5rem;\n  }\n}\n\n.obj-right img,\n.align-right img {\n  display: block;\n}\n\n.obj-left,\n.align-left {\n  margin: 0;\n  margin-top: 1.25rem;\n}\n\n@media print, screen and (min-width: 48em) {\n  .obj-left,\n  .align-left {\n    margin-top: 1.25rem;\n  }\n}\n\n@media print, screen and (min-width: 64em) {\n  .obj-left,\n  .align-left {\n    margin-top: 2.5rem;\n  }\n}\n\n@media print, screen and (min-width: 48em) {\n  .obj-left,\n  .align-left {\n    float: left;\n    padding: 0 2.5rem 0 0;\n    margin-bottom: 3.75rem;\n  }\n  .obj-left figcaption,\n  .align-left figcaption {\n    padding: 0 2.5rem 0 0;\n  }\n}\n\n.obj-left img,\n.align-left img {\n  display: block;\n}\n\n.obj-center,\n.align-center:not(.grid-x) {\n  margin-top: 1.25rem;\n  margin-right: auto;\n  margin-bottom: 0;\n  margin-left: auto;\n}\n\n@media print, screen and (min-width: 48em) {\n  .obj-center,\n  .align-center:not(.grid-x) {\n    margin-top: 1.25rem;\n  }\n}\n\n@media print, screen and (min-width: 64em) {\n  .obj-center,\n  .align-center:not(.grid-x) {\n    margin-top: 2.5rem;\n  }\n}\n\n.obj-center img,\n.align-center:not(.grid-x) img {\n  display: block;\n}\n\nimg {\n  max-width: 100%;\n}\n","////\n/// @group variables\n/// Site-wide typefaces.\n////\n\n/// Typeface Definitions\n/// --------------------\n\n/// Typefaces\n/// @type String\n$serif: 'Roboto Slab',courier,georgia,serif;  // stylelint-disable-line\n$sans-serif: 'HCo Gotham SSm',helvetica,sans-serif; // stylelint-disable-line\n$font-awesome: 'Font Awesome 5 Pro'; // stylelint-disable-line\n\n/*\nGotham\nXLight 200\nLight 300 \nBook 400\nMedium 500\nBold 700\nBlack 800\n\nMontserrat\nLight 300\nBook 400\nMedium 500\nBold 700\n\nRoboto Slab\nLight 300\nBold 700\n*/\n","/**\n * Foundation for Sites by ZURB\n * Version 6.5.3\n * foundation.zurb.com\n * Licensed under MIT Open Source\n */\n\n// Dependencies\n@import 'vendor/normalize';\n@import '../_vendor/sassy-lists/stylesheets/helpers/missing-dependencies';\n@import '../_vendor/sassy-lists/stylesheets/helpers/true';\n@import '../_vendor/sassy-lists/stylesheets/functions/contain';\n@import '../_vendor/sassy-lists/stylesheets/functions/purge';\n@import '../_vendor/sassy-lists/stylesheets/functions/remove';\n@import '../_vendor/sassy-lists/stylesheets/functions/replace';\n@import '../_vendor/sassy-lists/stylesheets/functions/to-list';\n\n// --- Settings ---\n// import your own `settings` here or\n// import and modify the default settings through\n// @import 'settings/settings';\n\n// --- Components ---\n// Utilities\n@import 'util/util';\n// Global styles\n@import 'global';\n@import 'forms/forms';\n@import 'typography/typography';\n\n// Grids\n@import 'grid/grid';\n@import 'xy-grid/xy-grid';\n// Generic components\n@import 'components/button';\n@import 'components/button-group';\n@import 'components/close-button';\n@import 'components/label';\n@import 'components/progress-bar';\n@import 'components/slider';\n@import 'components/switch';\n@import 'components/table';\n// Basic components\n@import 'components/badge';\n@import 'components/breadcrumbs';\n@import 'components/callout';\n@import 'components/card';\n@import 'components/dropdown';\n@import 'components/pagination';\n@import 'components/tooltip';\n\n// Containers\n@import 'components/accordion';\n@import 'components/media-object';\n@import 'components/orbit';\n@import 'components/responsive-embed';\n@import 'components/tabs';\n@import 'components/thumbnail';\n// Menu-based containers\n@import 'components/menu';\n@import 'components/menu-icon';\n@import 'components/accordion-menu';\n@import 'components/drilldown';\n@import 'components/dropdown-menu';\n\n// Layout components\n@import 'components/off-canvas';\n@import 'components/reveal';\n@import 'components/sticky';\n@import 'components/title-bar';\n@import 'components/top-bar';\n\n// Helpers\n@import 'components/float';\n@import 'components/flex';\n@import 'components/visibility';\n@import 'prototype/prototype';\n\n\n@mixin foundation-everything(\n  $flex: true,\n  $prototype: false\n) {\n  @if $flex {\n    $global-flexbox: true !global;\n  }\n\n  // Global styles\n  @include foundation-global-styles;\n  @include foundation-forms;\n  @include foundation-typography;\n\n  // Grids\n  @if not $flex {\n    @include foundation-grid;\n  }\n  @else {\n    @if $xy-grid {\n      @include foundation-xy-grid-classes;\n    }\n    @else {\n      @include foundation-flex-grid;\n    }\n  }\n\n  // Generic components\n  @include foundation-button;\n  @include foundation-button-group;\n  @include foundation-close-button;\n  @include foundation-label;\n  @include foundation-progress-bar;\n  @include foundation-slider;\n  @include foundation-switch;\n  @include foundation-table;\n  // Basic components\n  @include foundation-badge;\n  @include foundation-breadcrumbs;\n  @include foundation-callout;\n  @include foundation-card;\n  @include foundation-dropdown;\n  @include foundation-pagination;\n  @include foundation-tooltip;\n\n  // Containers\n  @include foundation-accordion;\n  @include foundation-media-object;\n  @include foundation-orbit;\n  @include foundation-responsive-embed;\n  @include foundation-tabs;\n  @include foundation-thumbnail;\n  // Menu-based containers\n  @include foundation-menu;\n  @include foundation-menu-icon;\n  @include foundation-accordion-menu;\n  @include foundation-drilldown-menu;\n  @include foundation-dropdown-menu;\n\n  // Layout components\n  @include foundation-off-canvas;\n  @include foundation-reveal;\n  @include foundation-sticky;\n  @include foundation-title-bar;\n  @include foundation-top-bar;\n\n  // Helpers\n  @include foundation-float-classes;\n  @if $flex { @include foundation-flex-classes; }\n  @include foundation-visibility-classes;\n  @if $prototype { @include foundation-prototype-classes; }\n}\n","////\n/// @group global\n/// Styles neede to format content created in the WYSIWYG editor.\n////\n\n.obj-right,\n.align-right {\n  @include obj-right;\n\n  img {\n    display: block;\n  }\n}\n\n.obj-left,\n.align-left {\n  @include obj-left;\n\n  img {\n    display: block;\n  }\n}\n\n.obj-center,\n.align-center:not(.grid-x) {\n  @include obj-center;\n\n  img {\n    display: block;\n  }\n}\n","////\n/// @group utilites\n/// Functions and mixins for theme styles.\n////\n\n/// General\n/// -------\n\n/// Creates a background color gradient that moves on hover.\n///\n/// @param {Color} $start-color - The start color of the gradient.\n/// @param {Color} $end-color - The end color of the gradient.\n/// Source: https://stackoverflow.com/a/17212432\n@mixin animation-bgcolor-swipe(\n  $start-color: $accent-orange,\n  $end-color: $accent-red\n) {\n  background-image: linear-gradient(to left, $start-color 50%, $end-color 50%);\n  background-position: right bottom;\n  background-size: 200% 100%;\n\n  &:hover {\n    background-position: left bottom;\n  }\n}\n\n/// Generates rules for button styles.\n@mixin btn {\n  display: inline-block;\n  margin-bottom: 0;\n  padding: rem-calc(12 20);\n  @include breakpoint(medium) {\n    padding: rem-calc(17 28);\n    letter-spacing: 1.5px;\n  }\n  transition: background $primary-transition, color $primary-transition;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $primary-color;\n  font-family: $sans-serif;\n  @include font-sizes(12, 14, 14);\n  font-weight: 500;\n  @include line-heights(14, 17, 17);\n\n  &:not(.sidebar-menu__toggle):hover {\n    text-decoration: none;\n    color: $black;\n    background-color: $ull-teal-dusty;\n  }\n}\n\n@mixin btn-light {\n  display: inline-block;\n  margin-bottom: 1.25em;\n  padding: 1em 1.5em;\n  transition: background $primary-transition;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: $primary-color;\n  border: .0625em solid $gray;\n  background-color: $white;\n  font-family: $sans-serif;\n  font-weight: 600;\n  line-height: 1;\n\n  &:hover {\n    text-decoration: none;\n    background-color: $gray;\n  }\n}\n\n/// Generates Font Awesome font rules.\n@mixin font-awesome {\n  font-family: $font-awesome;\n  font-weight: 400;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/// Generates a link arrow.\n@mixin link-arrow {\n  border-bottom: none;\n  font-weight: 500;\n  \n  &:after {\n    padding-left: .25em;\n    content: '\\f061';\n    @include font-awesome;\n    color: $ull-red;\n  }\n}\n\n/// Generates left float rules for objects in WYSIWYGs.\n@mixin obj-left {\n  \n  margin: 0;\n  @include margins-top(20, 20, 40);\n  \n  @include breakpoint(medium) {\n    float: left;\n    padding: rem-calc(0 40 0 0);\n    margin-bottom: rem-calc(60);\n    \n    figcaption {\n      padding: rem-calc(0 40 0 0);\n    }\n  }\n}\n\n/// Generates right float rules for objects in WYSIWYGs.\n@mixin obj-right {\n\n  margin: 0;\n  @include margins-top(20, 20, 40);\n\n  @include breakpoint(medium) {\n    float: right;\n    padding: rem-calc(0 0 0 40);\n    margin-bottom: rem-calc(60);\n    \n    figcaption {\n      padding: rem-calc(0 0 0 40);\n    }\n  }\n}\n\n/// Generates centering rules for objects in WYSIWYGs.\n@mixin obj-center {\n  @include margins-top(20, 20, 40);\n  margin-right: auto;\n  margin-bottom: 0;\n  margin-left: auto;\n}\n\n/// Generates placeholder selectors for all major browsers.\n@mixin placeholder {\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    // Gecko adds an opacity by default. Remove it.\n    opacity: 1;\n    @content;\n  }\n\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n/// Generates rules for only showing items to a screen reader.\n@mixin show-for-sr {\n  position: absolute !important; // stylelint-disable-line\n  overflow: hidden;\n  clip: rect(1px, 1px, 1px, 1px);\n  width: 1px;\n  height: 1px;\n}\n\n/// Grid\n//------\n\n/// Generate grid columns on a selector.\n///\n/// @param {Boolean} $-up-screens - The breakpoint to use?\n/// @todo Needs work, is this even a good idea with XY Grid?\n/// Source: https://foundation.zurb.com/forum/posts/1026-include-multiple-column-mixins\n@mixin grid-columns(\n  $small-up-screens: false,\n  $medium-up-screens: false,\n  $large-up-screens: false,\n  $xlarge-up-screens: false,\n  $xxlarge-up-screens: false,\n  $small-only-screens: false,\n  $medium-only-screens: false,\n  $large-only-screens: false,\n  $xlarge-only-screens: false,\n  $xxlarge-only-screens: false\n) {\n  // Small and up screens\n  @if $small-up-screens {\n    @include grid-column($small-up-screens);\n  }\n  // Medium and up screens\n  @if $medium-up-screens {\n    @include breakpoint(medium) {\n      @include grid-column($medium-up-screens);\n    }\n  }\n  // Large and up screens\n  @if $large-up-screens {\n    @include breakpoint(large) {\n      @include grid-column($large-up-screens);\n    }\n  }\n  // XLarge and up screens\n  @if $xlarge-up-screens {\n    @include breakpoint(xlarge) {\n      @include grid-column($xlarge-up-screens);\n    }\n  }\n  // XXLarge and up screens\n  @if $xxlarge-up-screens {\n    @include breakpoint(xxlarge) {\n      @include grid-column($xxlarge-up-screens);\n    }\n  }\n  // Small only screens\n  @if $small-only-screens {\n    @include breakpoint(small only) {\n      @include grid-column($small-only-screens);\n    }\n  }\n  // Medium only screens\n  @if $medium-only-screens {\n    @include breakpoint(medium only) {\n      @include grid-column($medium-only-screens);\n    }\n  }\n  // Large only screens\n  @if $large-only-screens {\n    @include breakpoint(large only) {\n      @include grid-column($large-only-screens);\n    }\n  }\n  // XLarge only screens\n  @if $xlarge-only-screens {\n    @include breakpoint(xlarge only) {\n      @include grid-column($xlarge-only-screens);\n    }\n  }\n  // XXLarge only screens\n  @if $xxlarge-only-screens {\n    @include breakpoint(xxlarge only) {\n      @include grid-column($xxlarge-only-screens);\n    }\n  }\n}\n\n/// Spacing\n/// -------\n\n/// Generate bottom margins automatically per breakpoint.\n///\n/// @param {Number} $-value - Values for each breakpoint.-\n/// @todo How does this work with customizable breakpoints? Can we somehow\n///   leverage that map here?\n@mixin margins-bottom($small-value, $medium-value, $large-value) {\n  margin-bottom: rem-calc($small-value);\n\n  @include breakpoint(medium) {\n    margin-bottom: rem-calc($medium-value);\n  }\n\n  @include breakpoint(large) {\n    margin-bottom: rem-calc($large-value);\n  }\n}\n\n/// Generate top margins automatically per breakpoint.\n///\n/// @param {Number} $-value - Values for each breakpoint.-\n/// @todo How does this work with customizable breakpoints? Can we somehow\n///   leverage that map here?\n@mixin margins-top($small-value, $medium-value, $large-value) {\n  margin-top: rem-calc($small-value);\n\n  @include breakpoint(medium) {\n    margin-top: rem-calc($medium-value);\n  }\n\n  @include breakpoint(large) {\n    margin-top: rem-calc($large-value);\n  }\n}\n\n/// Generate bottom padding automatically per breakpoint.\n///\n/// @param {Number} $-value - Values for each breakpoint.-\n/// @todo How does this work with customizable breakpoints? Can we somehow\n///   leverage that map here?\n@mixin paddings-bottom($small-value, $medium-value, $large-value) {\n  padding-bottom: rem-calc($small-value);\n\n  @include breakpoint(medium) {\n    padding-bottom: rem-calc($medium-value);\n  }\n\n  @include breakpoint(large) {\n    padding-bottom: rem-calc($large-value);\n  }\n}\n\n/// Generate top padding automatically per breakpoint.\n///\n/// @param {Number} $-value - Values for each breakpoint.-\n/// @todo How does this work with customizable breakpoints? Can we somehow\n///   leverage that map here?\n@mixin paddings-top($small-value, $medium-value, $large-value) {\n  padding-top: rem-calc($small-value);\n\n  @include breakpoint(medium) {\n    padding-top: rem-calc($medium-value);\n  }\n\n  @include breakpoint(large) {\n    padding-top: rem-calc($large-value);\n  }\n}\n\n/// Generate horizontal padding automatically per breakpoint.\n///\n/// @param {Number} $-value - Values for each breakpoint.-\n/// @todo How does this work with customizable breakpoints? Can we somehow\n///   leverage that map here?\n@mixin paddings-left-right($small-value, $medium-value, $large-value) {\n  padding-right: rem-calc($small-value);\n  padding-left: rem-calc($small-value);\n\n  @include breakpoint(medium) {\n    padding-right: rem-calc($small-value);\n    padding-left: rem-calc($small-value);\n  }\n\n  @include breakpoint(large) {\n    padding-right: rem-calc($large-value);\n    padding-left: rem-calc($large-value);\n  }\n}\n\n/// Typography\n/// ----------\n\n/// Generate font sizes automatically per breakpoint.\n///\n/// @param {Number} $-value - Values for each breakpoint.-\n/// @todo How does this work with customizable breakpoints? Can we somehow\n///   leverage that map here?\n@mixin font-sizes($small-value, $medium-value, $large-value) {\n  font-size: rem-calc($small-value);\n\n  @include breakpoint(medium) {\n    font-size: rem-calc($medium-value);\n  }\n\n  @include breakpoint(large) {\n    font-size: rem-calc($large-value);\n  }\n}\n\n/// Generate line heights automatically per breakpoint.\n///\n/// @param {Number} $-value - Values for each breakpoint.-\n/// @todo How does this work with customizable breakpoints? Can we somehow\n///   leverage that map here?\n@mixin line-heights($small-value, $medium-value, $large-value) {\n  line-height: rem-calc($small-value);\n\n  @include breakpoint(medium) {\n    line-height: rem-calc($medium-value);\n  }\n\n  @include breakpoint(large) {\n    line-height: rem-calc($large-value);\n  }\n}\n\n\n/// margin-top adjustment to account for line height\n@mixin line-height-adjustment($font-size, $line-height) {\n  &:before {\n    content: \"\";\n    display: block;\n    height: 0;\n    width: 0; \n    margin-top: calc((#{$font-size} - #{$line-height}) * 0.5px );\n  }\n}\n@mixin line-height-adjustment-medium($font-size,$line-height) {\n  \n  &:before {\n    @media #{$medium-up} {\n      margin-top: calc((#{$font-size} - #{$line-height}) * 0.5px );\n    }\n  }\n}\n@mixin line-height-adjustment-large($font-size,$line-height) {\n  \n  &:before {\n    @media #{$large-up} {\n      margin-top: calc((#{$font-size} - #{$line-height}) * 0.5px );\n    }\n  }\n}\n\n\n/// common section title style\n@mixin wide-lined-title($bg-color, $line-color) {\n  position: relative;\n  z-index: 8;\n  @include font-sizes(24, 26, 32);\n  @include line-heights(31, 34, 42);\n  font-weight: 400;\n  @include breakpoint(small down) {\n    border-bottom: 2px solid $line-color;\n    &:after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      background: transparent;\n      top: 0;\n      left: calc(100% - 2px);\n      bottom: 0;\n      height: 100%;\n      width: 22px;\n      border-bottom: 2px solid $line-color;\n    }\n  }\n  @include breakpoint(medium) {\n    span {\n      position: relative;\n      display: inline-block;\n      background: $bg-color;\n      padding-right: 18px;\n      &:before {\n        content: \"\";\n        position: absolute;\n        z-index: 9;\n        top: 0;\n        right: 100%;\n        bottom: 0;\n        width: 18px;\n        background: $bg-color;\n      }\n    }\n    \n    &:after {\n      content: \"\";\n      position: absolute;\n      z-index: -1;\n      top: calc(50% - 1px);\n      right: 0;\n      left: 0;\n      height: 1px;\n      border-bottom: 2px solid $line-color;\n      transition: all 0.3s ease-out;\n      @include breakpoint(1330) {\n        left: -65px;\n        right: -65px;\n      }\n    }\n  }\n}\n\n/// eyebrow style \n@mixin eyebrow {\n  font-family: $sans-serif;\n  font-size: rem-calc(13);\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 1.5px;\n}\n\n/// small text style \n@mixin small-text {\n  font-size: rem-calc(16);\n  line-height: 1.5;\n}\n\n/// accent text style \n@mixin accent-text {\n  font-size: rem-calc(13);\n  line-height: 1.3;\n}\n\n/// red link without underline\n@mixin red-link {\n  color: $ull-red;\n  border-bottom-color: transparent;\n  transition: all 0.3s ease-out;\n  &:hover,\n  &:focus {\n    outline: none;\n    color: $black;\n    border-bottom-color: $ull-red;\n  } \n} ","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now let's convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: ($value / 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return strip-unit($value) / strip-unit($base);\n  }\n\n  // assume that line-heights greater than 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return $value / strip-unit($base);\n  }\n\n  @return $value;\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n  // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n  // See https://github.com/zurb/foundation-sites/issues/11313\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - .00125;\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  $-zf-size: $old-zf-size !global;\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n"]}